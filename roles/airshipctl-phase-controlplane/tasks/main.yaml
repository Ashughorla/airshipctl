# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO (dukov) this is needed dute to sushy tools inserts cdrom image to
# all vms. This can be removed once sushy tool is fixed
- name: ensure all cdrom images are ejected
  shell: |-
    set -x
    for vm in $(virsh list --all --name |grep -v {{ ephemeral_domain_name }})
    do
        virsh domblklist $vm |
            awk 'NF==2 {print $1}' |
            grep -v Target |
            xargs -I{} virsh change-media $vm {} --eject || :
    done
  become: yes

- name: download target image
  shell: |
    set -e
    DOWNLOAD="200"
    if [ -e {{ target_image_dir }}/target-image.qcow2 ]
    then
        MTIME=$(date -d @$(stat -c %Y {{ target_image_dir }}/target-image.qcow2) +"%a, %d %b %Y %T %Z")
        DOWNLOAD=$(curl -sSLI \
            --write-out '%{http_code}' \
            -H "If-Modified-Since: ${MTIME}" \
            {{ target_image_url }} | tail -1)
    fi
    if [ "${DOWNLOAD}" != "304" ]
    then
        curl -sSLo {{ target_image_dir }}/target-image.qcow2 {{ target_image_url }}
    fi
    md5sum /srv/iso/target-image.qcow2 | cut -d ' ' -f 1 > {{ target_image_dir }}/target-image.qcow2.md5sum

- name: create target k8s cluster resources
  command: >-
    airshipctl phase apply controlplane

- name: get kubeconfig from secret
  command: >-
    kubectl \
    --kubeconfig {{ airshipctl_config_dir_default | default(ansible_env.HOME) }}/.airship/kubeconfig \
    get secret target-cluster-kubeconfig -o jsonpath='{.data.value}'
  register: kubeconfig
  failed_when: "kubeconfig.stdout == ''"
  retries: 6
  delay: 10
  until: kubeconfig.rc == 0

- name: create kubeconfig
  copy:
    content: "{{ kubeconfig.stdout | b64decode }}"
    dest: /tmp/targetkubeconfig

- name: check kubectl version
  command: >-
    timeout 20 kubectl --kubeconfig /tmp/targetkubeconfig version
  register: airship_kubecofig_version
  retries: 30
  delay: 60
  until: airship_kubecofig_version.rc == 0

- name: check nodes status
  command: kubectl --kubeconfig /tmp/targetkubeconfig wait node --for=condition=Ready --all --timeout 900s

- name: get cluster state
  command: >-
    kubectl --kubeconfig {{ airshipctl_config_dir_default | default(ansible_env.HOME) }}/.airship/kubeconfig \
    get cluster
